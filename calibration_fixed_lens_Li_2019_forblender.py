# -*- coding: utf-8 -*-
"""
Created on Mon Sep 28 08:59:25 2020

@author: u6265553
"""

'''
This script generates fitted homography proposed by Li and Nguyen [2019] by 
computing homography between the centres of the dots of a calibration target 
image with respect to those of the reference calibration target image 
corresponding to the fixed lens synthetic images generated by Blender.
'''

import glob
import numpy as np
import cv2
from skimage import restoration
from scipy.signal import convolve2d as conv2
from scipy import misc, optimize, special
from matplotlib import pylab as plt

#import images
imglist=glob.glob('F:/Arif/moving_lens/blender_images/insect4/moving_lens_calibration/img/x=0/y=0/*.jpg')

#reference image
img1 = cv2.imread(imglist[63])
height,width,channel=np.shape(img1)
gray = cv2.cvtColor(img1,cv2.COLOR_BGR2GRAY)
    
# reducing the out of focus (blurring) effect
psf = np.ones([5, 5]) / 25
image = conv2(gray, psf, 'same')
image += 0.1 * image.std() * np.random.standard_normal(image.shape)
deconvolved = restoration.wiener(image, psf, 1, clip=False)

# Find the circle centers for reference image
ret, centers_ref = cv2.findCirclesGrid(np.uint8(deconvolved), (6,7), None, flags = cv2.CALIB_CB_SYMMETRIC_GRID)

H=np.zeros([len(imglist),3,3])
for i in range(len(imglist)):
    
    img1 = cv2.imread(imglist[i])
    height,width,channel=np.shape(img1)
    
    #resizing the image
    img=cv2.resize(img1,(int(width/1),int(height/1)))
    
    # converting to gray
    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    
    # reducing the out of focus (blurring) effect
    psf = np.ones([3, 3]) / 9
    image = conv2(gray, psf, 'same')
    image += 0.1 * image.std() * np.random.standard_normal(image.shape)
    deconvolved = restoration.wiener(image, psf, 1, clip=False)
    
    # Find the circle centers
    ret, centers = cv2.findCirclesGrid(np.uint8(deconvolved), (6,7), None, flags = cv2.CALIB_CB_SYMMETRIC_GRID)
    
    # If found, image points
    if ret==True:
        
        cv2.drawChessboardCorners(img1, (6,7), centers*1, ret)
        print(i)
        H[i]=cv2.findHomography(centers,centers_ref)[0]
         
H_file = 'F:/Arif/moving_lens/blender_images/insect4/moving_lens_calibration/Hs.npz'
homographies = []
np.savez(H_file, homographies=H)